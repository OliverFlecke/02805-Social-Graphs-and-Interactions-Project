{"version":3,"sources":["section/Section.ts","components/Markdown.tsx","components/Navigation.tsx","components/Histogram.tsx","section/Sentiment.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Navigation.module.scss","App.module.scss","components/Markdown.module.scss","components/Histogram.module.scss"],"names":["Section","Markdown","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","axios","get","concat","filename","then","x","setState","data","state","inherits","createClass","key","value","react","className","styles","react_markdown_default","a","source","React","Navigation","_React$PureComponent","apply","arguments","keys","map","section","lib","smooth","to","Histogram","chart","Highcharts","getOptions","addSeries","name","binData","mean","reduce","acc","length","xAxis","addPlotLine","width","color","zIndex","label","text","toPrecision","react_default","createElement","id","console","debug","binBottom","binTop","histData","max","prev","current","min","i","Array","j","type","margin","backgroundColor","title","legend","enabled","tooltip","plotOptions","series","pointPadding","groupPadding","borderWidth","borderColor","linkedTo","opposite","gridLineWidth","gridLineColor","gridZIndex","yAxis","credits","Component","Sentiment","Axios","split","Number","Markdown_Markdown","Histogram_Histogram","App","BrowserRouter","basename","Navigation_Navigation","Introduction","Data","Network","Centrality","Communities","Sentiment_Sentiment","Conclusion","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","nav","container","placeholder","AppLogo","AppLogoSpin","AppHeader","AppLink"],"mappings":"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","file":"static/js/main.b81f2005.chunk.js","sourcesContent":["export enum Section {\r\n    Introduction = 'Introduction',\r\n    Data = 'Data',\r\n    Network = 'Network',\r\n    Centrality = 'Centrality',\r\n    Communities = 'Communities',\r\n    Sentiment = 'Sentiment',\r\n    Conclusion = 'Conclusion',\r\n}\r\n","import axios from 'axios';\r\nimport * as React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport * as styles from './Markdown.module.scss';\r\n\r\nexport interface IMarkdownProps {\r\n    filename: string;\r\n}\r\n\r\nexport interface IMarkdownState {\r\n    data?: string;\r\n}\r\n\r\nexport class Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\r\n    public constructor(props: IMarkdownProps) {\r\n        super(props);\r\n\r\n        axios\r\n            .get(`text/${this.props.filename}`)\r\n            .then((x) => this.setState({ data: x.data }));\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.data) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <ReactMarkdown source={this.state.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { Section } from '../section/Section';\r\nimport * as styles from './Navigation.module.scss';\r\n\r\nexport class Navigation extends React.PureComponent {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <nav className={styles.nav}>\r\n                    <div className={styles.container}>\r\n                        {Object.keys(Section).map((section: string) => (\r\n                            <HashLink\r\n                                key={section}\r\n                                smooth={true}\r\n                                to={`#${section}`}\r\n                            >\r\n                                {section}\r\n                            </HashLink>\r\n                        ))}\r\n                    </div>\r\n                </nav>\r\n                <div className={styles.placeholder} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as Highcharts from 'highcharts';\r\nimport React from 'react';\r\nimport * as styles from './Histogram.module.scss';\r\n\r\ninterface IHistogramProps {\r\n    data: number[];\r\n    title: string;\r\n    bins?: number;\r\n}\r\n\r\nexport class Histogram extends React.Component<IHistogramProps> {\r\n    public componentDidMount() {\r\n        const chart = Highcharts.chart('container', this.getOptions());\r\n        chart.addSeries({\r\n            name: 'Distribution',\r\n            data: this.binData(this.props.data),\r\n        });\r\n\r\n        const mean =\r\n            this.props.data.reduce(\r\n                (acc: number, value: number) => acc + value,\r\n            ) / this.props.data.length;\r\n\r\n        chart.xAxis[0].addPlotLine({\r\n            value: mean,\r\n            width: 1,\r\n            color: 'rgba(0,0,0,0.5)',\r\n            zIndex: 8,\r\n            label: {\r\n                text: `Mean ${mean.toPrecision(2)}`,\r\n            },\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return <div id='container' className={styles.container} />;\r\n    }\r\n\r\n    private binData(data: number[]) {\r\n        console.debug(data[0]);\r\n        const histData: any[] = [];\r\n        const bins = 30;\r\n\r\n        const max = data.reduce((prev: number, current: number) =>\r\n            prev > current ? prev : current,\r\n        );\r\n        const min = data.reduce((prev: number, current: number) =>\r\n            prev < current ? prev : current,\r\n        );\r\n        const range = max - min;\r\n        const width = range / bins; // size of the bins\r\n\r\n        let binBottom; // place holders for the bounds of each bin\r\n        let binTop;\r\n\r\n        // loop through the number of cells\r\n        for (let i = 0; i < bins; i++) {\r\n            // set the upper and lower limits of the current cell\r\n            binBottom = min + i * width;\r\n            binTop = binBottom + width;\r\n\r\n            // check for and set the x value of the bin\r\n            if (!histData[i]) {\r\n                histData[i] = new Array();\r\n                histData[i][0] = binBottom + width / 2;\r\n            }\r\n\r\n            // loop through the data to see if it fits in this bin\r\n            for (let j = 0; j < data.length; j++) {\r\n                const x = data[j];\r\n\r\n                // adjust if it's the first pass\r\n                i === 0 && j === 0 ? (binBottom -= 1) : (binBottom = binBottom);\r\n\r\n                // if it fits in the bin, add it\r\n                if (x > binBottom && x <= binTop) {\r\n                    !histData[i][1] ? (histData[i][1] = 1) : histData[i][1]++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return histData;\r\n    }\r\n\r\n    private getOptions(): any {\r\n        return {\r\n            chart: {\r\n                type: 'column',\r\n                margin: [50, 25, 25, 50],\r\n                backgroundColor: 'white',\r\n            },\r\n            title: {\r\n                text: this.props.title,\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n            },\r\n            width: 100,\r\n            tooltip: {},\r\n            plotOptions: {\r\n                series: {\r\n                    pointPadding: 0,\r\n                    groupPadding: 0,\r\n                    borderWidth: 0.5,\r\n                    borderColor: 'rgba(255,255,255,0.5)',\r\n                },\r\n            },\r\n            xAxis: [\r\n                {\r\n                    title: {\r\n                        text: 'Range',\r\n                    },\r\n                },\r\n                {\r\n                    linkedTo: 0,\r\n                    opposite: true,\r\n                    gridLineWidth: 0.5,\r\n                    gridLineColor: 'rgba(0,0,0,0.25)',\r\n                    gridZIndex: 8,\r\n                },\r\n            ],\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Frequency',\r\n                },\r\n                min: 0,\r\n            },\r\n            credits: {\r\n                enabled: false,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import Axios from 'axios';\r\nimport React from 'react';\r\nimport { Histogram } from '../components/Histogram';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\n\r\ninterface ISentiment {\r\n    data?: number[];\r\n}\r\n\r\nexport class Sentiment extends React.Component<{}, ISentiment> {\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n\r\n        Axios.get('data/sentiment_all.txt').then((x: any) =>\r\n            this.setState({\r\n                data: x.data.split('\\n').map((value: string) => Number(value)),\r\n            }),\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <section id={Section.Sentiment}>\r\n                <Markdown filename={'sentiment.md'} />\r\n                {this.state.data ? (\r\n                    <Histogram\r\n                        data={this.state.data}\r\n                        title='Sentiment distribution'\r\n                    />\r\n                ) : null}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as styles from './App.module.scss';\r\nimport { Markdown } from './components/Markdown';\r\nimport { Navigation } from './components/Navigation';\r\nimport { Section } from './section/Section';\r\nimport { Sentiment } from './section/Sentiment';\r\n\r\nclass App extends Component {\r\n    public render() {\r\n        return (\r\n            <BrowserRouter basename='/'>\r\n                <div className={styles.App}>\r\n                    <Navigation />\r\n\r\n                    <section id={Section.Introduction}>\r\n                        <Markdown filename={'Introduction.md'} />\r\n                    </section>\r\n                    <section id={Section.Data}>\r\n                        <Markdown filename={'Data.md'} />\r\n                    </section>\r\n                    <section id={Section.Network}>\r\n                        <Markdown filename={'Network.md'} />\r\n                    </section>\r\n                    <section id={Section.Centrality}>\r\n                        <Markdown filename={'Centrality.md'} />\r\n                    </section>\r\n                    <section id={Section.Communities}>\r\n                        <Markdown filename={'Communities.md'} />\r\n                    </section>\r\n\r\n                    <Sentiment />\r\n\r\n                    <section id={Section.Conclusion}>\r\n                        <Markdown filename={'conclusion.md'} />\r\n                    </section>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__1AQ-X\",\"container\":\"Navigation_container__2Mh0a\",\"placeholder\":\"Navigation_placeholder__1w9TA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3yOy9\",\"AppLogo\":\"App_AppLogo__2OfHM\",\"AppLogoSpin\":\"App_AppLogoSpin__bWCiA\",\"AppHeader\":\"App_AppHeader__35lnf\",\"AppLink\":\"App_AppLink__392ev\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Markdown_container__5vecK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Histogram_container__2Smyq\"};"],"sourceRoot":""}