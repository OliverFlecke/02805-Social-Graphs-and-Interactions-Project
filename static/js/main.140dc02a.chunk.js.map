{"version":3,"sources":["components/Navigation.tsx","components/Section.tsx","App.tsx","serviceWorker.ts","index.tsx","App.module.scss","components/Navigation.module.scss","components/Section.module.scss"],"names":["Navigation","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","className","styles","lib","to","React","Section","_React$Component","props","_this","call","axios","get","filename","then","x","setState","data","state","react_markdown_default","a","source","App","react_default","createElement","BrowserRouter","basename","Navigation_Navigation","smooth","Section_Section","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","AppLogo","AppLogoSpin","AppHeader","AppLink","container"],"mappings":"sNAIaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,OACIC,EAAA,qBAAKC,UAAWC,aACZF,EAAA,cAACG,EAAA,SAAD,CAAUC,GAAG,eAAb,mBAJhBjB,EAAA,CAAgCkB,2DCSnBC,EAAb,SAAAC,GACI,SAAAD,EAAmBE,GAAsB,IAAAC,EAAA,OAAApB,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,GACrCG,EAAApB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAI,KAAAnB,KAAMiB,IAENG,IACKC,IAAI,WAAaH,EAAKD,MAAMK,UAC5BC,KAAK,SAACC,GAAD,OAAON,EAAKO,SAAS,CAAEC,KAAMF,EAAEE,SAEzCR,EAAKS,MAAQ,GAPwBT,EAD7C,OAAApB,OAAAO,EAAA,EAAAP,CAAAiB,EAAAC,GAAAlB,OAAAQ,EAAA,EAAAR,CAAAiB,EAAA,EAAAR,IAAA,SAAAC,MAAA,WAYQ,OAAKR,KAAK2B,MAAMD,KAKZjB,EAAA,qBAAKC,UAAWC,aACZF,EAAA,cAACmB,EAAAC,EAAD,CAAeC,OAAQ9B,KAAK2B,MAAMD,QAL/B,SAbnBX,EAAA,CAA6BD,aCediB,mLAnBP,OACIC,EAAAH,EAAAI,cAACC,EAAA,EAAD,CAAeC,SAAS,KACpBH,EAAAH,EAAAI,cAAA,OAAKvB,UAAWC,OACZqB,EAAAH,EAAAI,cAACG,EAAD,MACAJ,EAAAH,EAAAI,cAACrB,EAAA,SAAD,CAAUyB,QAAQ,EAAMxB,GAAG,QAA3B,UAIAmB,EAAAH,EAAAI,cAACK,EAAD,CAAShB,SAAU,YACnBU,EAAAH,EAAAI,cAACK,EAAD,CAAShB,SAAU,YACnBU,EAAAH,EAAAI,cAAA,OAAKM,GAAG,OACJP,EAAAH,EAAAI,cAACK,EAAD,CAAShB,SAAU,sBAbzBkB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAH,EAAAI,cAACe,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,mCE1InBC,EAAAC,QAAA,CAAkB1B,IAAA,iBAAA2B,QAAA,qBAAAC,YAAA,yBAAAC,UAAA,uBAAAC,QAAA,0CCAlBL,EAAAC,QAAA,CAAkBK,UAAA,mDCAlBN,EAAAC,QAAA,CAAkBK,UAAA","file":"static/js/main.140dc02a.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as styles from './Navigation.module.scss';\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\nexport class Navigation extends React.PureComponent {\r\n    public render() {\r\n        return (\r\n            <nav className={styles.container}>\r\n                <HashLink to='#Conclusion'>Conclusion</HashLink>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport * as React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport * as styles from './Section.module.scss';\r\n\r\nexport interface ISectionProps {\r\n    filename: string;\r\n}\r\n\r\nexport interface ISectionState {\r\n    data?: string;\r\n}\r\n\r\nexport class Section extends React.Component<ISectionProps, ISectionState> {\r\n    public constructor(props: ISectionProps) {\r\n        super(props);\r\n\r\n        axios\r\n            .get('section/' + this.props.filename)\r\n            .then((x) => this.setState({ data: x.data }));\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.data) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <ReactMarkdown source={this.state.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport * as styles from './App.module.scss';\r\nimport { Navigation } from './components/Navigation';\r\nimport { Section } from './components/Section';\r\n\r\nclass App extends Component {\r\n    public render() {\r\n        return (\r\n            <BrowserRouter basename='/'>\r\n                <div className={styles.App}>\r\n                    <Navigation />\r\n                    <HashLink smooth={true} to='#end'>\r\n                        to end\r\n                    </HashLink>\r\n\r\n                    <Section filename={'test.md'} />\r\n                    <Section filename={'test.md'} />\r\n                    <div id='end'>\r\n                        <Section filename={'test.md'} />\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3yOy9\",\"AppLogo\":\"App_AppLogo__2OfHM\",\"AppLogoSpin\":\"App_AppLogoSpin__bWCiA\",\"AppHeader\":\"App_AppHeader__35lnf\",\"AppLink\":\"App_AppLink__392ev\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navigation_container__2Mh0a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__202p2\"};"],"sourceRoot":""}