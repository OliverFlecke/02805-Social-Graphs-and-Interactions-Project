{"version":3,"sources":["App.module.scss","components/ImageSlider.module.scss","section/Section.ts","components/Navigation.tsx","components/ImageSlider.tsx","components/Markdown.tsx","section/Centrality.tsx","section/Communities.tsx","section/Data.tsx","section/Discussion.tsx","section/Introduction.tsx","section/LongestShortestPath.tsx","section/Network.tsx","components/HistogramChart.tsx","components/Histogram.tsx","section/Sentiment.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Navigation.module.scss","section/styles/Introduction.module.scss","components/HistogramChart.module.scss"],"names":["module","exports","App","titleContainer","title","imageGif","sliderContainer","itemContainer","image","Section","Navigation","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","className","styles","keys","map","section","lib","smooth","to","concat","React","ImageSlider","_React$Component","props","call","react_default","a","createElement","react_slick_lib_default","dots","infinite","speed","slidesToShow","slidesToScroll","images","src","process","text","Component","Markdown","_this","axios","get","filename","then","x","setState","data","state","react_markdown_default","source","Centrality","id","Markdown_Markdown","ImageSlider_ImageSlider","Communities","Data","onClickExpand","expanded","style","margin","onClick","Discussion","Introduction","YouTube","videoId","opts","playerVars","iv_load_policy","LongestShortestPath","Paths","boxShadow","Network","HistogramChart","chart","Highcharts","getOptions","addSeries","name","type","xAxis","addPlotLine","mean","width","color","zIndex","label","toPrecision","normalDistribution","backgroundColor","legend","enabled","tooltip","plotOptions","column","pointPadding","groupPadding","borderWidth","borderColor","pointWidth","spline","enableMouseTracking","marker","linkedTo","opposite","gridLineWidth","gridLineColor","gridZIndex","yAxis","min","credits","Histogram","Axios","dataFile","response","series","isBinned","binData","getNormalDistribution","normalDistributionFile","HistogramChart_HistogramChart","reduce","acc","length","std","Math","sqrt","pow","max","unit","_","range","y","mu","sigma","exp","normalY","binBottom","binTop","histData","prev","current","i","Array","j","forEach","bin","index","push","maxFreq","Number","MIN_VALUE","minFreq","MAX_VALUE","Sentiment","Histogram_Histogram","BrowserRouter","basename","Navigation_Navigation","Introduction_Introduction","Data_Data","Network_Network","Centrality_Centrality","Communities_Communities","LongestShortestPath_LongestShortestPath","Sentiment_Sentiment","Discussion_Discussion","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","nav","container","placeholder","videoContainer","video"],"mappings":"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","file":"static/js/main.e5f630b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3yOy9\",\"titleContainer\":\"App_titleContainer__2RefD\",\"title\":\"App_title__qYly5\",\"imageGif\":\"App_imageGif__d1bb_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sliderContainer\":\"ImageSlider_sliderContainer__hvS2k\",\"title\":\"ImageSlider_title__33UsC\",\"itemContainer\":\"ImageSlider_itemContainer__3x-GP\",\"image\":\"ImageSlider_image__1jfb0\"};","export enum Section {\r\n    Introduction = 'Introduction',\r\n    Data = 'Data',\r\n    Network = 'Network',\r\n    Centrality = 'Centrality',\r\n    Communities = 'Communities',\r\n    Paths = 'Paths',\r\n    Sentiment = 'Sentiment',\r\n    Discussion = 'Discussion',\r\n}\r\n","import * as React from 'react';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { Section } from '../section/Section';\r\nimport * as styles from './Navigation.module.scss';\r\n\r\nexport class Navigation extends React.PureComponent {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <nav className={styles.nav}>\r\n                    <div className={styles.container}>\r\n                        {Object.keys(Section).map((section: string) => (\r\n                            <HashLink\r\n                                key={section}\r\n                                smooth={true}\r\n                                to={`#${section}`}\r\n                            >\r\n                                {section}\r\n                            </HashLink>\r\n                        ))}\r\n                    </div>\r\n                </nav>\r\n                <div className={styles.placeholder} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Slider from 'react-slick';\r\nimport { Image } from '../shared/Image';\r\nimport '../styles/Slick.scss';\r\nimport * as styles from './ImageSlider.module.scss';\r\n\r\ninterface ImageSliderProps {\r\n    images: Image[];\r\n}\r\n\r\nexport class ImageSlider extends React.Component<ImageSliderProps> {\r\n    constructor(props: ImageSliderProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const settings = {\r\n            dots: true,\r\n            infinite: true,\r\n            speed: 500,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1,\r\n        };\r\n\r\n        return (\r\n            <div className={styles.sliderContainer}>\r\n                <Slider {...settings}>\r\n                    {this.props.images.map((image: Image) => (\r\n                        <div key={image.image} className={styles.itemContainer}>\r\n                            <h3 className={styles.title}>{image.title}</h3>\r\n                            <img src={`${process.env.PUBLIC_URL}/images/${image.image}`} className={styles.image} />\r\n                            {image.text}\r\n                        </div>\r\n                    ))}\r\n                </Slider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport * as React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport * as styles from './Markdown.module.scss';\r\n\r\nexport interface IMarkdownProps {\r\n    filename: string;\r\n}\r\n\r\nexport interface IMarkdownState {\r\n    data?: string;\r\n}\r\n\r\nexport class Markdown extends React.Component<IMarkdownProps, IMarkdownState> {\r\n    public constructor(props: IMarkdownProps) {\r\n        super(props);\r\n\r\n        axios\r\n            .get(`text/${this.props.filename}`)\r\n            .then((x) => this.setState({ data: x.data }));\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.data) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <ReactMarkdown source={this.state.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { ImageSlider } from '../components/ImageSlider';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\n\r\nexport class Centrality extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Centrality} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Centrality.md'} />\r\n\r\n                    <ImageSlider\r\n                        images={[\r\n                            {\r\n                                image: 'graph_degree_size.png',\r\n                                title: 'Degree size',\r\n                                text:\r\n                                    'Determining the node sizes based on node degrees gives an idea of how busy an airport is or at least number of different flight paths that connects the airport to the rest of the world. ',\r\n                            },\r\n                            {\r\n                                image: 'graph_betweeness_centrality.png',\r\n                                title: 'Betweenness centrality',\r\n                                text:\r\n                                    'Determining the node sizes based on the betweenness centrality measures gives an idea of which airports which most often is used for connecting flights',\r\n                            },\r\n                            {\r\n                                image: 'graph_eigenvector_centrality.png',\r\n                                title: 'Eigenvector centrality',\r\n                                text:\r\n                                    'With the node sizes depending on the eigenvector centrality measurements it takes into perspective how well the connected airports are connected to eachother.',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { ImageSlider } from '../components/ImageSlider';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\n\r\nexport class Communities extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Communities} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Communities.md'} />\r\n                    Below we can see various ways of seperating the different airports around the world into\r\n                    communities. The best division of nodes into communities has no clear structure. The reason for the\r\n                    \"lack\" of structure does make sense. Large airports with many routes tend to add all the small\r\n                    airports that have links to the larger airport to the same community.\r\n                    <ImageSlider\r\n                        images={[\r\n                            {\r\n                                image: 'airportgraph_communities.png',\r\n                                title: 'Optimal communities in the graph',\r\n                                text: `Each color represents a different community. It is clear that there isn't any apparent pattern in the community partition.`,\r\n                            },\r\n                            {\r\n                                image: 'airportgraph_continent_communities.png',\r\n                                title: 'Communities based on continents',\r\n                                text: 'Each color represents a different community (continent).',\r\n                            },\r\n                            {\r\n                                image: 'airportgraph_country_communities.png',\r\n                                title: 'Communities based on countries',\r\n                                text: 'Each color represents a different community (country).',\r\n                            },\r\n                        ]}\r\n                    />\r\n                    By creating communities based on what continent the airports are placed on, we get a community\r\n                    structure that makes more sense to the human eye. Communities based on countries were also done, but\r\n                    this doesn't really create good communities since many flights are international and therefore the\r\n                    modularity will not be very high.\r\n                    <img src={`${process.env.PUBLIC_URL}/images/airportgraph_with_high_degree_hubs.png`} />\r\n                    It turned out that the modularity of the best community partition was not very good. THe continent\r\n                    community partition was almost as good as the best. In the above figure, the top ten hubs are marked\r\n                    as red nodes and flights involving these are pink lines. It is clear that it is hard to get good\r\n                    communities, since the hubs tend to connect many different parts of the world together.\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\n\r\ninterface DataState {\r\n    expanded: boolean;\r\n}\r\n\r\nexport class Data extends React.Component<{}, DataState> {\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false,\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Data} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Data.md'} />\r\n                    <p style={{ margin: '0 2.5%' }}>\r\n                        <button onClick={this.onClickExpand}>{this.state.expanded ? 'Hide ' : 'Show '}</button> the\r\n                        full, more technical, description of the airport and routes data set.\r\n                    </p>\r\n                    {this.state.expanded ? (\r\n                        <div>\r\n                            <Markdown filename={'Airports.md'} />\r\n                            <Markdown filename={'Routes.md'} />\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n\r\n    private onClickExpand = () => {\r\n        this.setState({ expanded: !this.state.expanded });\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\n\r\nexport class Discussion extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Discussion} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Discussion.md'} />\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\nimport * as styles from './styles/Introduction.module.scss';\r\n\r\nexport class Introduction extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Introduction} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Introduction.md'} />\r\n                    <div className={styles.videoContainer}>\r\n                        <YouTube\r\n                            videoId='pDUjlGqFPuQ'\r\n                            className={styles.video}\r\n                            opts={{\r\n                                playerVars: {\r\n                                    iv_load_policy: 3,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\n\r\nexport class LongestShortestPath extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Paths} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename='LongestShortestPath.md' />\r\n                    <img\r\n                        src={`${process.env.PUBLIC_URL}/images/longest_shortest_path.png`}\r\n                        style={{ boxShadow: 'none' }}\r\n                    />\r\n                    <Markdown filename='LongestShortestPath_text.md' />\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Markdown } from '../components/Markdown';\r\nimport { Section } from './Section';\r\nimport './styles/Network.module.scss';\r\n\r\nexport class Network extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Network} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Network.md'} />\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import * as Highcharts from 'highcharts';\r\nimport React from 'react';\r\nimport { Point } from '../shared/Point';\r\nimport * as styles from './HistogramChart.module.scss';\r\n\r\ninterface IHistogramProps {\r\n    data: Point[];\r\n    title: string;\r\n    mean: number;\r\n    normalDistribution?: Point[];\r\n}\r\n\r\nexport class HistogramChart extends React.Component<IHistogramProps> {\r\n    public componentDidMount() {\r\n        const chart = Highcharts.chart('container', this.getOptions());\r\n        chart.addSeries({\r\n            name: 'Distribution',\r\n            data: this.props.data,\r\n            type: 'column',\r\n        });\r\n\r\n        chart.xAxis[0].addPlotLine({\r\n            value: this.props.mean,\r\n            width: 1,\r\n            color: 'rgba(0,0,0,0.5)',\r\n            zIndex: 8,\r\n            label: {\r\n                text: `Mean ${this.props.mean.toPrecision(2)}`,\r\n            },\r\n        });\r\n\r\n        chart.addSeries({\r\n            data: this.props.normalDistribution,\r\n            type: 'spline',\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return <div id='container' className={styles.container} />;\r\n    }\r\n\r\n    private getOptions(): any {\r\n        return {\r\n            chart: {\r\n                margin: [50, 25, 25, 50],\r\n                backgroundColor: 'white',\r\n            },\r\n            title: {\r\n                text: this.props.title,\r\n            },\r\n            legend: {\r\n                enabled: false,\r\n            },\r\n            tooltip: {},\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0,\r\n                    groupPadding: 0,\r\n                    borderWidth: 0.5,\r\n                    borderColor: 'rgba(255,255,255,0.5)',\r\n                    pointWidth: 15,\r\n                    color: '#87CEEB',\r\n                },\r\n                spline: {\r\n                    enableMouseTracking: false,\r\n                    marker: false,\r\n                    color: '#000',\r\n                },\r\n            },\r\n            xAxis: [\r\n                {\r\n                    title: {\r\n                        text: 'Range',\r\n                    },\r\n                },\r\n                {\r\n                    linkedTo: 0,\r\n                    opposite: true,\r\n                    gridLineWidth: 0.5,\r\n                    gridLineColor: 'rgba(0,0,0,0.25)',\r\n                    gridZIndex: 8,\r\n                },\r\n            ],\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Frequency',\r\n                },\r\n                min: 0,\r\n            },\r\n            credits: {\r\n                enabled: false,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import Axios from 'axios';\r\nimport _ from 'lodash';\r\nimport React from 'react';\r\nimport { Point } from '../shared/Point';\r\nimport { HistogramChart } from './HistogramChart';\r\n\r\ninterface HistogramProps {\r\n    dataFile: string;\r\n    title: string;\r\n    mean?: number;\r\n    isBinned?: boolean;\r\n    normalDistributionFile?: string;\r\n}\r\n\r\ninterface HistogramState {\r\n    data?: Point[];\r\n    normalDistribution?: Point[];\r\n}\r\n\r\nexport class Histogram extends React.Component<HistogramProps, HistogramState> {\r\n    constructor(props: HistogramProps) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n\r\n        Axios.get(this.props.dataFile).then((response: any) => {\r\n            let data = response.data.series;\r\n            if (!this.props.isBinned) {\r\n                data = this.binData(data);\r\n                this.setState({ data, normalDistribution: this.getNormalDistribution(data) });\r\n            } else {\r\n                this.setState({\r\n                    data,\r\n                });\r\n            }\r\n        });\r\n\r\n        if (this.props.normalDistributionFile) {\r\n            Axios.get(this.props.normalDistributionFile).then((response: any) =>\r\n                this.setState({ normalDistribution: response.data.series }),\r\n            );\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (!this.state.data || !this.state.normalDistribution) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <HistogramChart\r\n                data={this.state.data}\r\n                normalDistribution={this.state.normalDistribution}\r\n                title={this.props.title}\r\n                mean={6.2}\r\n            />\r\n        );\r\n    }\r\n\r\n    private getNormalDistribution(data: number[]) {\r\n        const mean = data.reduce((acc: number, value: number) => acc + value) / data.length;\r\n        const std = Math.sqrt(\r\n            data\r\n                .map((x: number) => x - mean)\r\n                .map((x: number) => x ** 2)\r\n                .reduce((acc: number, value: number) => acc + value) /\r\n                (data.length - 1),\r\n        );\r\n\r\n        const min = data.reduce((acc, x) => (acc < x ? acc : x));\r\n        const max = data.reduce((acc, x) => (acc > x ? acc : x));\r\n        const unit = (max - min) / 100;\r\n\r\n        const normalY = (x: number, mu: number, sigma: number) => Math.exp(-0.5 * Math.pow((x - mu) / sigma, 2));\r\n\r\n        return _.range(min, max, unit).map((x: number) => ({\r\n            x,\r\n            y: normalY(x, mean, std),\r\n        }));\r\n    }\r\n\r\n    private binData(data: number[]) {\r\n        const histData: any[] = [];\r\n        const bins = 30;\r\n\r\n        const max = data.reduce((prev: number, current: number) => (prev > current ? prev : current));\r\n        const min = data.reduce((prev: number, current: number) => (prev < current ? prev : current));\r\n        const range = max - min;\r\n        const width = range / bins; // size of the bins\r\n\r\n        let binBottom; // place holders for the bounds of each bin\r\n        let binTop;\r\n\r\n        // loop through the number of cells\r\n        for (let i = 0; i < bins; i++) {\r\n            // set the upper and lower limits of the current cell\r\n            binBottom = min + i * width;\r\n            binTop = binBottom + width;\r\n\r\n            // check for and set the x value of the bin\r\n            if (!histData[i]) {\r\n                histData[i] = new Array();\r\n                histData[i][0] = binBottom + width / 2;\r\n            }\r\n\r\n            // loop through the data to see if it fits in this bin\r\n            for (let j = 0; j < data.length; j++) {\r\n                const x = data[j];\r\n\r\n                // adjust if it's the first pass\r\n                i === 0 && j === 0 ? (binBottom -= 1) : (binBottom = binBottom);\r\n\r\n                // if it fits in the bin, add it\r\n                if (x > binBottom && x <= binTop) {\r\n                    !histData[i][1] ? (histData[i][1] = 1) : histData[i][1]++;\r\n                }\r\n            }\r\n        }\r\n\r\n        histData.forEach((bin: number[], index: number) => {\r\n            if (bin.length === 1) {\r\n                histData[index].push(0);\r\n            }\r\n        });\r\n\r\n        const maxFreq = histData.reduce((acc: number, x: number[]) => (acc > x[1] ? acc : x[1]), Number.MIN_VALUE);\r\n        const minFreq = histData.reduce((acc: number, x: number[]) => (acc < x[1] ? acc : x[1]), Number.MAX_VALUE);\r\n\r\n        histData.forEach((value: number[], index: number) => {\r\n            histData[index][1] = (value[1] - minFreq) / (maxFreq - minFreq);\r\n        });\r\n\r\n        return histData;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Histogram } from '../components/Histogram';\r\nimport { ImageSlider } from '../components/ImageSlider';\r\nimport { Markdown } from '../components/Markdown';\r\nimport '../styles/Slick.scss';\r\nimport { Section } from './Section';\r\n\r\nexport class Sentiment extends React.Component {\r\n    public render() {\r\n        return (\r\n            <section>\r\n                <div id={Section.Sentiment} />\r\n                <div className={'sectionContainer'}>\r\n                    <Markdown filename={'Sentiment.md'} />\r\n\r\n                    <ImageSlider\r\n                        images={[\r\n                            {\r\n                                image: 'wordcloud.png',\r\n                                title: 'Words used in all of the tweets',\r\n                                text: <Markdown filename={'Wordcloud.md'} />,\r\n                            },\r\n                            {\r\n                                image: 'wordcloud_negative.png',\r\n                                title: 'Words used in negative tweets',\r\n                                text: <Markdown filename={'Wordcloud_negative.md'} />,\r\n                            },\r\n                            {\r\n                                image: 'wordcloud_positive.png',\r\n                                title: 'Words used in the positive tweets',\r\n                                text: <Markdown filename={'Wordcloud_positive.md'} />,\r\n                            },\r\n                        ]}\r\n                    />\r\n\r\n                    <Markdown filename={'SentimentDistribution.md'} />\r\n\r\n                    <Histogram\r\n                        title='Sentiment distribution'\r\n                        dataFile='data/sentiment_normalized.json'\r\n                        normalDistributionFile='data/normal_distribution.json'\r\n                        isBinned={true}\r\n                    />\r\n\r\n                    <ImageSlider\r\n                        images={[\r\n                            { image: 'graph_absolute_sentiment.png', title: 'Absolute sentiment' },\r\n                            { image: 'graph_negative_sentiment_airports.png', title: 'Negative sentiment' },\r\n                            { image: 'graph_positive_sentiment_airports.png', title: 'Positive sentiment' },\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as styles from './App.module.scss';\r\nimport { Navigation } from './components/Navigation';\r\nimport { Centrality } from './section/Centrality';\r\nimport { Communities } from './section/Communities';\r\nimport { Data } from './section/Data';\r\nimport { Discussion } from './section/Discussion';\r\nimport { Introduction } from './section/Introduction';\r\nimport { LongestShortestPath } from './section/LongestShortestPath';\r\nimport { Network } from './section/Network';\r\nimport { Sentiment } from './section/Sentiment';\r\n\r\nclass App extends Component {\r\n    public render() {\r\n        return (\r\n            <BrowserRouter basename='/'>\r\n                <div className={styles.App}>\r\n                    <Navigation />\r\n\r\n                    <div className={styles.titleContainer}>\r\n                        <img src={`${process.env.PUBLIC_URL}/images/graphrendering.gif`} className={styles.imageGif} />\r\n\r\n                        <h1 className={styles.title}>Airport Network Analysis</h1>\r\n                    </div>\r\n\r\n                    <Introduction />\r\n                    <Data />\r\n                    <Network />\r\n                    <Centrality />\r\n                    <Communities />\r\n                    <LongestShortestPath />\r\n                    <Sentiment />\r\n                    <Discussion />\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\ninterface IConfig {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__1AQ-X\",\"container\":\"Navigation_container__2Mh0a\",\"placeholder\":\"Navigation_placeholder__1w9TA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"videoContainer\":\"Introduction_videoContainer__15Gpx\",\"video\":\"Introduction_video__1evGe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HistogramChart_container__17F1L\"};"],"sourceRoot":""}